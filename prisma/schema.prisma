generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model artists {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeAccountId   String?  @unique
  isStripeOnboarded Boolean  @default(false)
  totalEarnings     Decimal  @default(0)
  totalSubscribers  Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  users             users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model campaign_analytics {
  id                 String    @id
  campaignId         String
  date               DateTime
  dailySignups       Int       @default(0)
  totalParticipants  Int       @default(0)
  activeParticipants Int       @default(0)
  dailySubmissions   Int       @default(0)
  totalSubmissions   Int       @default(0)
  dailyViews         Int       @default(0)
  totalViews         Int       @default(0)
  sharesCount        Int       @default(0)
  mentionsCount      Int       @default(0)
  hashtagUse         Int       @default(0)
  dailyRevenue       Decimal   @default(0)
  totalRevenue       Decimal   @default(0)
  conversionRate     Decimal   @default(0)
  engagementRate     Decimal   @default(0)
  retentionRate      Decimal   @default(0)
  completionRate     Decimal   @default(0)
  campaigns          campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date])
  @@index([campaignId, date])
}

model campaign_rewards {
  id                       String                 @id
  campaignId               String
  title                    String
  description              String?
  type                     String
  value                    Decimal?
  currency                 String                 @default("USD")
  quantity                 Int                    @default(1)
  contentId                String?
  accessDays               Int?
  tierAccess               String?
  shippingRequired         Boolean                @default(false)
  estimatedValue           Decimal?
  supplier                 String?
  rankRequirement          Int?
  scoreRequirement         Int?
  participationRequirement Boolean                @default(false)
  isActive                 Boolean                @default(true)
  totalAwarded             Int                    @default(0)
  remainingQuantity        Int?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime
  content                  content?               @relation(fields: [contentId], references: [id])
  campaigns                campaigns              @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  reward_distributions     reward_distributions[]
}

model campaigns {
  id                 String               @id
  artistId           String
  title              String
  description        String?
  type               String
  status             String               @default("DRAFT")
  startDate          DateTime
  endDate            DateTime
  maxParticipants    Int?
  entryFee           Decimal?
  currency           String               @default("USD")
  targetMetric       String
  targetValue        Int
  currentValue       Int                  @default(0)
  totalPrizePool     Decimal              @default(0)
  hasDigitalPrizes   Boolean              @default(false)
  hasPhysicalPrizes  Boolean              @default(false)
  bannerImage        String?
  brandColor         String?              @default("#6366f1")
  tags               String?
  totalParticipants  Int                  @default(0)
  totalEngagement    Int                  @default(0)
  totalRevenue       Decimal              @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  campaign_analytics campaign_analytics[]
  campaign_rewards   campaign_rewards[]
  users              users                @relation(fields: [artistId], references: [id], onDelete: Cascade)
  challenges         challenges[]

  @@index([artistId, status])
  @@index([startDate, endDate])
  @@index([status, startDate])
}

model challenge_leaderboards {
  id               String     @id
  challengeId      String
  userId           String
  rank             Int
  score            Int
  submissions      Int
  lastSubmissionAt DateTime?
  baseScore        Int        @default(0)
  bonusScore       Int        @default(0)
  penaltyScore     Int        @default(0)
  updatedAt        DateTime
  createdAt        DateTime   @default(now())
  users            users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenges       challenges @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, userId])
  @@index([challengeId, rank])
}

model challenge_participations {
  id                    String                  @id
  challengeId           String
  participantId         String
  status                String                  @default("ACTIVE")
  joinedAt              DateTime                @default(now())
  lastActiveAt          DateTime                @default(now())
  currentScore          Int                     @default(0)
  submissionCount       Int                     @default(0)
  rank                  Int?
  notifications         Boolean                 @default(true)
  isAnonymous           Boolean                 @default(false)
  users                 users                   @relation(fields: [participantId], references: [id], onDelete: Cascade)
  challenges            challenges              @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challenge_submissions challenge_submissions[]

  @@unique([challengeId, participantId])
  @@index([participantId, status])
  @@index([challengeId, status])
  @@index([challengeId, lastActiveAt])
}

model challenge_submissions {
  id                       String                   @id
  challengeId              String
  participationId          String
  submitterId              String
  title                    String
  description              String?
  contentType              String
  contentUrl               String
  thumbnailUrl             String?
  metadata                 String?
  status                   String                   @default("PENDING")
  reviewStatus             String                   @default("PENDING")
  totalScore               Int                      @default(0)
  judgeScores              String?
  publicVotes              Int                      @default(0)
  isFlagged                Boolean                  @default(false)
  flagReason               String?
  moderatedBy              String?
  moderatedAt              DateTime?
  viewCount                Int                      @default(0)
  likeCount                Int                      @default(0)
  commentCount             Int                      @default(0)
  shareCount               Int                      @default(0)
  submittedAt              DateTime                 @default(now())
  updatedAt                DateTime
  users                    users                    @relation(fields: [submitterId], references: [id], onDelete: Cascade)
  challenge_participations challenge_participations @relation(fields: [participationId], references: [id], onDelete: Cascade)
  challenges               challenges               @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@index([challengeId, status])
  @@index([submitterId])
  @@index([challengeId, submittedAt])
  @@index([reviewStatus])
}

model challenges {
  id                       String                     @id
  campaignId               String
  title                    String
  description              String
  type                     String
  status                   String                     @default("ACTIVE")
  rules                    String
  requirements             String?
  submissionTypes          String
  scoringCriteria          String
  maxScore                 Int                        @default(100)
  autoJudging              Boolean                    @default(false)
  startDate                DateTime?
  endDate                  DateTime?
  submissionDeadline       DateTime?
  maxSubmissions           Int?
  maxParticipants          Int?
  isPublic                 Boolean                    @default(true)
  featuredOrder            Int?
  participantCount         Int                        @default(0)
  submissionCount          Int                        @default(0)
  engagementScore          Int                        @default(0)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  challenge_leaderboards   challenge_leaderboards[]
  challenge_participations challenge_participations[]
  challenge_submissions    challenge_submissions[]
  campaigns                campaigns                  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId, status])
  @@index([startDate, endDate])
}

model comments {
  id        String   @id
  contentId String
  fanId     String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [fanId], references: [id], onDelete: Cascade)
  content   content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId, createdAt])
  @@index([fanId])
}

model content {
  id               String             @id
  artistId         String
  title            String
  description      String?
  type             String
  fileUrl          String
  thumbnailUrl     String?
  visibility       String             @default("PUBLIC")
  fileSize         Int
  duration         Int?
  format           String
  tags             String
  totalViews       Int                @default(0)
  uniqueViews      Int                @default(0)
  totalLikes       Int                @default(0)
  lastViewedAt     DateTime?
  publishedAt      DateTime?
  scheduledFor     DateTime?
  isScheduled      Boolean            @default(false)
  publishStatus    String             @default("PUBLISHED")
  autoPublish      Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  campaign_rewards campaign_rewards[]
  comments         comments[]
  users            users              @relation(fields: [artistId], references: [id], onDelete: Cascade)
  content_likes    content_likes[]
  content_views    content_views[]
  playlist_items   playlist_items[]
  tiers            tiers[]            @relation("TierContent")
  scheduled_publish scheduled_publish?

  @@index([artistId, visibility])
  @@index([type, visibility])
  @@index([createdAt])
  @@index([totalViews])
  @@index([artistId, type, createdAt])
  @@index([visibility, createdAt])
  @@index([tags])
  @@index([scheduledFor, isScheduled])
  @@index([publishStatus])
}

model content_likes {
  id        String   @id
  userId    String
  contentId String
  createdAt DateTime @default(now())
  content   content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
}

model content_views {
  id            String   @id
  contentId     String
  viewerId      String
  viewCount     Int      @default(1)
  totalDuration Int      @default(0)
  maxPercentage Int      @default(0)
  lastViewedAt  DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  users         users    @relation(fields: [viewerId], references: [id], onDelete: Cascade)
  content       content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([contentId, viewerId, createdAt])
  @@index([viewerId])
  @@index([contentId, viewerId])
  @@index([contentId, createdAt])
}

model invoices {
  id              String        @id
  subscriptionId  String
  stripeInvoiceId String        @unique
  amount          Decimal
  status          String
  dueDate         DateTime
  paidAt          DateTime?
  periodStart     DateTime
  periodEnd       DateTime
  prorationAmount Decimal?
  items           Json
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  subscriptions   subscriptions @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, status])
  @@index([dueDate])
  @@index([status, paidAt])
  @@index([createdAt])
}

model live_streams {
  id                   String                 @id
  artistId             String
  title                String
  description          String?
  status               String                 @default("SCHEDULED")
  streamKey            String                 @unique
  maxViewers           Int?                   @default(1000)
  isRecorded           Boolean                @default(false)
  recordingUrl         String?
  thumbnailUrl         String?
  scheduledAt          DateTime?
  startedAt            DateTime?
  endedAt              DateTime?
  peakViewers          Int                    @default(0)
  totalViewers         Int                    @default(0)
  totalTips            Decimal                @default(0)
  totalMessages        Int                    @default(0)
  tierIds              String
  isPublic             Boolean                @default(false)
  requiresPayment      Boolean                @default(false)
  paymentAmount        Decimal?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  users                users                  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  stream_chat_messages stream_chat_messages[]
  stream_polls         stream_polls[]
  stream_recordings    stream_recordings[]
  stream_tips          stream_tips[]
  stream_viewers       stream_viewers[]

  @@index([artistId, status])
  @@index([scheduledAt])
  @@index([isPublic, status])
  @@index([status, startedAt])
}

model messages {
  id                                String    @id
  senderId                          String
  recipientId                       String
  content                           String
  type                              String    @default("TEXT")
  attachmentUrl                     String?
  readAt                            DateTime?
  deliveredAt                       DateTime?
  createdAt                         DateTime  @default(now())
  updatedAt                         DateTime
  users_messages_recipientIdTousers users     @relation("messages_recipientIdTousers", fields: [recipientId], references: [id], onDelete: Cascade)
  users_messages_senderIdTousers    users     @relation("messages_senderIdTousers", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId, createdAt])
  @@index([recipientId, readAt])
  @@index([recipientId, createdAt])
}

model oauth_tokens {
  id                    String    @id
  userId                String
  provider              String
  encryptedAccessToken  String
  encryptedRefreshToken String?
  expiresAt             DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  users                 users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
}

model payment_failures {
  id              String        @id
  subscriptionId  String
  stripeInvoiceId String        @unique
  amount          Decimal
  attemptCount    Int           @default(1)
  nextRetryAt     DateTime?
  failureReason   String
  isResolved      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  subscriptions   subscriptions @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, isResolved])
  @@index([nextRetryAt])
}

model playlist_items {
  id         String    @id
  playlistId String
  contentId  String
  position   Int
  addedAt    DateTime  @default(now())
  content    content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  playlists  playlists @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([playlistId, contentId])
  @@unique([playlistId, position])
}

model playlist_likes {
  id         String    @id
  userId     String
  playlistId String
  createdAt  DateTime  @default(now())
  playlists  playlists @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, playlistId])
  @@index([userId])
}

model playlists {
  id             String           @id
  userId         String
  title          String
  description    String?
  isPublic       Boolean          @default(false)
  coverImage     String?
  playCount      Int              @default(0)
  likeCount      Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  playlist_items playlist_items[]
  playlist_likes playlist_likes[]
  users          users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic, createdAt])
}

model refresh_tokens {
  id                String   @id
  userId            String
  tokenHash         String   @unique
  expiresAt         DateTime
  userAgent         String
  ipAddress         String
  deviceFingerprint String?
  isRevoked         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  users             users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRevoked])
  @@index([expiresAt])
}

model reports {
  id                              String    @id
  reporterId                      String
  targetType                      String
  targetId                        String
  reason                          String
  description                     String
  evidence                        String
  status                          String    @default("PENDING")
  priority                        String    @default("MEDIUM")
  resolution                      String?
  action                          String?
  reviewedBy                      String?
  reviewedAt                      DateTime?
  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime
  users_reports_reviewedByTousers users?    @relation("reports_reviewedByTousers", fields: [reviewedBy], references: [id])
  users_reports_reporterIdTousers users     @relation("reports_reporterIdTousers", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([reporterId])
  @@index([targetType, targetId])
  @@index([status])
  @@index([reviewedBy])
}

model reward_distributions {
  id               String           @id
  rewardId         String
  userId           String
  status           String           @default("PENDING")
  reason           String?
  metadata         String?
  fulfilledAt      DateTime?
  trackingNumber   String?
  shippingAddress  String?
  awardedAt        DateTime         @default(now())
  updatedAt        DateTime
  users            users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign_rewards campaign_rewards @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@unique([rewardId, userId])
  @@index([userId, status])
  @@index([rewardId])
  @@index([awardedAt])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model stream_chat_messages {
  id               String       @id
  streamId         String
  senderId         String?
  senderName       String
  message          String
  type             String       @default("MESSAGE")
  isHighlighted    Boolean      @default(false)
  isModerated      Boolean      @default(false)
  moderatedBy      String?
  moderationReason String?
  createdAt        DateTime     @default(now())
  users            users?       @relation(fields: [senderId], references: [id])
  live_streams     live_streams @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId, createdAt])
  @@index([senderId])
}

model stream_poll_votes {
  id           String       @id
  pollId       String
  voterId      String?
  sessionId    String
  optionIndex  Int
  createdAt    DateTime     @default(now())
  users        users?       @relation(fields: [voterId], references: [id])
  stream_polls stream_polls @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([pollId, sessionId])
}

model stream_polls {
  id                String              @id
  streamId          String
  question          String
  options           String
  isActive          Boolean             @default(true)
  allowMultiple     Boolean             @default(false)
  createdAt         DateTime            @default(now())
  endedAt           DateTime?
  stream_poll_votes stream_poll_votes[]
  live_streams      live_streams        @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId, isActive])
}

model stream_recordings {
  id           String       @id
  streamId     String
  videoUrl     String
  audioUrl     String?
  thumbnailUrl String?
  duration     Int
  fileSize     Int
  quality      String
  format       String
  status       String       @default("PROCESSING")
  processedAt  DateTime?
  isPublic     Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  live_streams live_streams @relation(fields: [streamId], references: [id], onDelete: Cascade)
}

model stream_tips {
  id                    String       @id
  streamId              String
  tipperId              String?
  tipperName            String
  amount                Decimal
  message               String?
  currency              String       @default("USD")
  stripePaymentIntentId String?      @unique
  status                String       @default("PENDING")
  processedAt           DateTime?
  isAnonymous           Boolean      @default(false)
  showOnStream          Boolean      @default(true)
  createdAt             DateTime     @default(now())
  users                 users?       @relation(fields: [tipperId], references: [id])
  live_streams          live_streams @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId, createdAt])
  @@index([tipperId])
  @@index([status])
}

model stream_viewers {
  id           String       @id
  streamId     String
  viewerId     String?
  sessionId    String       @unique
  displayName  String?
  isAnonymous  Boolean      @default(false)
  ipAddress    String
  userAgent    String
  joinedAt     DateTime     @default(now())
  leftAt       DateTime?
  watchTime    Int          @default(0)
  users        users?       @relation(fields: [viewerId], references: [id])
  live_streams live_streams @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId, joinedAt])
  @@index([viewerId])
}

model subscriptions {
  id                   String             @id
  fanId                String
  artistId             String
  tierId               String
  stripeSubscriptionId String             @unique
  amount               Decimal
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  isTrialing           Boolean            @default(false)
  trialStartDate       DateTime?
  trialEndDate         DateTime?
  convertedFromTrial   Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  invoices             invoices[]
  payment_failures     payment_failures[]
  tiers                tiers              @relation(fields: [tierId], references: [id], onDelete: Cascade)
  users                users              @relation(fields: [fanId], references: [id], onDelete: Cascade)

  @@unique([fanId, tierId])
  @@index([fanId])
  @@index([artistId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@index([fanId, status])
  @@index([artistId, status])
  @@index([status, currentPeriodEnd])
  @@index([fanId, artistId, status])
  @@index([isTrialing, trialEndDate])
}

model tiers {
  id               String          @id
  artistId         String
  name             String
  description      String
  minimumPrice     Decimal
  stripePriceId    String?
  isActive         Boolean         @default(true)
  subscriberCount  Int             @default(0)
  allowFreeTrial   Boolean         @default(true)
  trialDays        Int             @default(7)
  trialDescription String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  subscriptions    subscriptions[]
  users            users           @relation(fields: [artistId], references: [id], onDelete: Cascade)
  content          content[]       @relation("TierContent")

  @@index([artistId, isActive])
}

model users {
  id                                   String                     @id
  email                                String                     @unique
  password                             String?
  role                                 String                     @default("FAN")
  displayName                          String
  bio                                  String?
  avatar                               String?
  socialLinks                          Json?
  notificationPreferences              Json?
  stripeCustomerId                     String?                    @unique
  lastSeenAt                           DateTime?
  emailVerified                        DateTime?
  image                                String?
  createdAt                            DateTime                   @default(now())
  updatedAt                            DateTime
  accounts                             accounts[]
  artists                              artists?
  campaigns                            campaigns[]
  challenge_leaderboards               challenge_leaderboards[]
  challenge_participations             challenge_participations[]
  challenge_submissions                challenge_submissions[]
  comments                             comments[]
  content                              content[]
  content_likes                        content_likes[]
  content_views                        content_views[]
  live_streams                         live_streams[]
  messages_messages_recipientIdTousers messages[]                 @relation("messages_recipientIdTousers")
  messages_messages_senderIdTousers    messages[]                 @relation("messages_senderIdTousers")
  oauth_tokens                         oauth_tokens[]
  playlist_likes                       playlist_likes[]
  playlists                            playlists[]
  refresh_tokens                       refresh_tokens[]
  reports_reports_reviewedByTousers    reports[]                  @relation("reports_reviewedByTousers")
  reports_reports_reporterIdTousers    reports[]                  @relation("reports_reporterIdTousers")
  reward_distributions                 reward_distributions[]
  sessions                             sessions[]
  stream_chat_messages                 stream_chat_messages[]
  stream_poll_votes                    stream_poll_votes[]
  stream_tips                          stream_tips[]
  stream_viewers                       stream_viewers[]
  subscriptions                        subscriptions[]
  tiers                                tiers[]
  onboarding_progress                  onboarding_progress?

  @@index([role, createdAt])
  @@index([lastSeenAt])
  @@index([emailVerified])
}

model onboarding_progress {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  user                   users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  profileComplete        Boolean   @default(false)
  stripeConnected        Boolean   @default(false)
  firstTierCreated       Boolean   @default(false)
  firstContentUploaded   Boolean   @default(false)
  profileShared          Boolean   @default(false)

  completionPercentage   Int       @default(0)
  currentStep            String?
  dismissedAt            DateTime?
  completedAt            DateTime?

  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@index([userId])
  @@index([completionPercentage])
}

model scheduled_publish {
  id           String   @id @default(cuid())
  contentId    String   @unique
  content      content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  scheduledFor DateTime
  timezone     String   @default("UTC")
  published    Boolean  @default(false)
  failedAt     DateTime?
  error        String?
  retryCount   Int      @default(0)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([scheduledFor, published])
  @@index([published])
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
