name: Deploy to Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '20'

jobs:
  # Run tests and quality checks
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: directfan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/directfan_test

      - name: Run database migrations
        run: npx prisma db push
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/directfan_test

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 7

      - name: Deployment Success
        run: |
          echo "âœ… DirectFanz build completed successfully!"
          echo "ðŸš€ Ready for production deployment to https://www.directfanz.io"
          echo "ðŸ“Š Build artifacts uploaded for deployment"
          urls: |
            https://directfan.com
            https://directfan.com/artists
            https://directfan.com/login
          configPath: './lighthouse-config.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Load testing
        run: |
          # Simple load test using curl
          for i in {1..50}; do
            curl -w "%{time_total}\n" -o /dev/null -s https://directfan.com/ &
          done
          wait
          echo "Load test completed"

      - name: Performance budget check
        run: |
          # Check if performance metrics meet requirements
          response_time=$(curl -w "%{time_total}" -o /dev/null -s https://directfan.com/)
          if (( $(echo "$response_time > 2.0" | bc -l) )); then
            echo "Response time too slow: ${response_time}s"
            exit 1
          fi
          echo "Performance check passed: ${response_time}s"
